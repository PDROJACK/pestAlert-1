{"version":3,"sources":["helpers/history.js","actions/constants.js","reducers/authentication.reducer.js","reducers/users.reducer.js","reducers/plantImage.reducer.js","reducers/index.js","helpers/store.js","helpers/api.js","services/user.services.js","services/plantImage.services.js","actions/user.actions.js","actions/plantImage.actions.js","components/Login.js","components/Home.js","components/Location.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","userConstants","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","GETALL_REQUEST","GETALL_SUCCESS","GETALL_FAILURE","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE","GET_USER","plantImageConstants","UPLOAD_PLANT_IMAGE","GETALL_PLANT_IMAGES","initialState","localStorage","getItem","loggedIn","user","name","plantImages","message","title","value","data","rootReducer","combineReducers","authentication","state","type","action","payload","loadingBar","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","loadingBarMiddleware","instance","axios","create","baseURL","AUTH_TOKEN","console","log","defaults","headers","common","handle","res","status","removeItem","error","statusText","Promise","reject","userService","api","post","then","setItem","token","plantImageService","alert","get","userActions","login","username","password","dispatch","showLoading","success","setTimeout","hideLoading","err","failure","toString","logout","getUser","plantImageActions","uploadPlantImage","getAllPlantImages","Login","props","handleChange","e","setState","target","handleSubmit","preventDefault","email","this","to","className","onSubmit","style","padding","onChange","placeholder","React","Component","mapDispatchToProps","connected","connect","auth","Demo","isGeolocationAvailable","isGeolocationEnabled","coords","marginBottom","latitude","longitude","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","Dashboard","fileInput","current","files","filename","FormData","append","loadingBarProgress","geolocation","createRef","me","val","navigator","getCurrentPosition","position","updateLocation","markers","textTransform","onClick","marginTop","ref","showLoader","width","height","MapContainer","googleMapURL","loadingElement","containerElement","mapElement","GeolocationNotEnabled","src","alt","withGeoLocation","MarkerList","map","item","label","disease_name","key","id","Math","floor","random","lat","parseFloat","lng","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","defaultOptions","styles","elementType","stylers","color","featureType","icon","url","scaledSize","App","backgroundColor","exact","path","component","PrivateRoute","rest","render","pathname","from","location","Boolean","window","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb7a1a34.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","export const userConstants = {\n    REGISTER_REQUEST: 'USERS_REGISTER_REQUEST',\n    REGISTER_SUCCESS: 'USERS_REGISTER_SUCCESS',\n    REGISTER_FAILURE: 'USERS_REGISTER_FAILURE',\n\n    LOGIN_REQUEST: 'USERS_LOGIN_REQUEST',\n    LOGIN_SUCCESS: 'USERS_LOGIN_SUCCESS',\n    LOGIN_FAILURE: 'USERS_LOGIN_FAILURE',\n    \n    LOGOUT: 'USERS_LOGOUT',\n\n    GETALL_REQUEST: 'USERS_GETALL_REQUEST',\n    GETALL_SUCCESS: 'USERS_GETALL_SUCCESS',\n    GETALL_FAILURE: 'USERS_GETALL_FAILURE',\n\n    DELETE_REQUEST: 'USERS_DELETE_REQUEST',\n    DELETE_SUCCESS: 'USERS_DELETE_SUCCESS',\n    DELETE_FAILURE: 'USERS_DELETE_FAILURE',\n    \n    GET_USER: 'GET_USER',\n};\n\nexport const plantImageConstants = {\n    UPLOAD_PLANT_IMAGE: 'UPLOAD_PLANT_IMAGE',\n    GETALL_PLANT_IMAGES: 'GETALL_PLANT_IMAGE',\n};","import { userConstants } from '../actions/constants';\n\nlet jwt = localStorage.getItem('token');\nconst initialState = (jwt)? { loggedIn: true } : { loggedIn: false, };\n\nexport function authentication(state = initialState, action) {\n  switch (action.type) {\n    case userConstants.LOGIN_REQUEST:\n      return {\n        loggedIn: true,\n      };\n    case userConstants.LOGIN_SUCCESS:\n      return {\n        loggedIn: true,\n      };\n    case userConstants.LOGIN_FAILURE:\n      return {\n        loggedIn: false,\n      };\n    case userConstants.LOGOUT:\n      return {\n        loggedIn: false,\n      };\n    default:\n      return state\n  }\n}","import { userConstants } from '../actions/constants';\n\nlet user = {\n    name: ''\n}\n\nexport function userReducer(state = user, action) {\n  switch (action.type) {\n    case userConstants.GET_USER:\n      const user = { ...action.payload }\n      return user\n    default:\n      return state\n  }\n}","import { plantImageConstants } from '../actions/constants';\n\nlet plantImages = {\n  message: {\n    title: \"\",\n    value: false\n  },\n  data: []\n}\n\nexport function plantImageReducer(state = plantImages, action) {\n  switch (action.type) {\n    case plantImageConstants.GETALL_PLANT_IMAGES: {\n      const updated = {\n        message: {\n          title: \"\",\n          value: false\n        },\n        data: [\n          ...action.payload\n        ]\n      }\n      return updated;\n    }\n    case plantImageConstants.UPLOAD_PLANT_IMAGE: {\n       const updated = {\n        message: {\n          title: \"Created\",\n          value: true\n        },\n        data: [\n          ...state.data, action.payload\n        ]\n      }\n      return updated;\n    }\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux';\n\nimport { loadingBarReducer as loadingBar } from 'react-redux-loading-bar'\n\nimport { authentication } from './authentication.reducer';\nimport { userReducer as user } from './users.reducer';\nimport { plantImageReducer as plantImages } from './plantImage.reducer';\n\n\nconst rootReducer = combineReducers({\n    authentication, user, plantImages, loadingBar\n});\n\nexport default rootReducer;\n\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { loadingBarMiddleware } from 'react-redux-loading-bar'\nimport rootReducer from '../reducers';\n\nconst loggerMiddleware = createLogger();\n\nexport const store = createStore(\n    rootReducer,\n    applyMiddleware(\n        thunkMiddleware,\n        loggerMiddleware,\n        loadingBarMiddleware()\n    )\n);","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.tuesday.wtf/api',\n})\n\nlet AUTH_TOKEN = localStorage.getItem('token');\n\nconsole.log(AUTH_TOKEN)\n\nif (AUTH_TOKEN) { instance.defaults.headers.common['Authorization'] = `Bearer ${AUTH_TOKEN}`; }\n\n\nexport const handle = (res) => {\n    if (res.status === 401) {\n        localStorage.removeItem('token');\n\n        const error = (res.data) || res.statusText;\n        return Promise.reject(error);\n    }\n\n    return res.data;\n} \n\nexport { instance as api };","import { api, handle } from '../helpers/api';\n\n// const login = data => api.post('/login', data).then(rs => console.log(rs));\nconst login = data => api.post('/login', data).then(handle)\n                         .then(res => localStorage.setItem('token', res.token));\n\nconst me = () => api.post('/me').then(handle);\n\nconst logout = () => localStorage.removeItem('token');\n\n\nexport const userService = {\n    login, logout, me\n}\n\n\n","import { api, handle } from '../helpers/api';\n\nconst uploadPlantImage = data => api.post('/image', data, {\n    headers: {\n        'content-type': 'multipart/form-data'\n    }\n}).then(handle).then(alert(\"done\"));\n\nconst getAllPlantImages = () => api.get('/image').then(handle);\n\nexport const plantImageService = {\n    uploadPlantImage, getAllPlantImages\n}","import { userService } from '../services';\nimport { userConstants } from './constants';\nimport { showLoading, hideLoading } from 'react-redux-loading-bar'\n\nconst login = (username, password) => {\n\n    const request = user => ({ type: userConstants.LOGIN_REQUEST, user });\n    const success = user => ({ type: userConstants.LOGIN_SUCCESS, user });\n    const failure = err => ({ type: userConstants.LOGIN_FAILURE, err });\n\n    return dispatch => {\n        dispatch(request({ username }));\n        dispatch(showLoading())\n        userService.login(username, password)\n            .then(user => {\n                dispatch(success(user))\n                // history.push('/dashboard')\n                setTimeout(() => {\n                    dispatch(hideLoading());\n                }, 1000);\n            },\n            err => {\n                dispatch(failure(err.toString()));\n                console.log(\"Error in Actions/UserActions/Login\");\n                console.log(err);\n                dispatch(hideLoading());\n            }\n        )   \n    };\n\n\n};\n\nconst logout = () => {\n    userService.logout();\n    return { type: userConstants.LOGOUT }\n}\n\nconst getUser = () => {\n    // const request = user => ({ type: userConstants.GET_USER,  });\n\n    return dispatch => {\n        \n        userService.me()\n            .then(user => {\n                // console.log(user);\n                dispatch({ type: userConstants.GET_USER, payload: user })\n                return { type: userConstants.GET_USER, payload: user };\n            },\n            err => {\n                console.log(\"Failure in getUser\");\n                console.log(err);\n            })\n    }\n    \n}\n\nexport const userActions = {\n    login, logout, getUser\n};","import { plantImageService } from '../services';\nimport { plantImageConstants } from './constants';\nimport { showLoading, hideLoading } from 'react-redux-loading-bar'\n\nconst uploadPlantImage = (data) => {\n    return dispatch => {\n        plantImageService.uploadPlantImage(data).then(data => {\n            dispatch(showLoading())\n            dispatch({type: plantImageConstants.UPLOAD_PLANT_IMAGE, payload: data})\n            setTimeout(() => {\n                dispatch(hideLoading());\n            }, 1000);\n            return {type: plantImageConstants.UPLOAD_PLANT_IMAGE, payload: data};\n        })\n    }\n}\n\nconst getAllPlantImages = () => {\n    return dispatch => {\n        plantImageService.getAllPlantImages().then(data => {\n            dispatch({ type: plantImageConstants.GETALL_PLANT_IMAGES, payload: data })\n            return { type: plantImageConstants.GETALL_PLANT_IMAGES, payload: data }\n        });\n    }\n}\n\nexport const plantImageActions = {\n    uploadPlantImage, getAllPlantImages\n};","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport {userActions} from '../actions';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: 'manishsahani@gmail.com',\n            password: 'manish',\n        }\n    }\n\n    handleChange = e => this.setState({ [e.target.name]: e.target.value });\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        console.log('Login form Submitted with', this.state.email);\n        this.props.login(this.state);\n    }\n\n\n    render() {\n\n        console.log(this.props)\n        \n        if (localStorage && localStorage.getItem('token')) return <Redirect to='/dashboard' />\n\n        return (\n            <div>\n                <section className=\"hero is-fullheight\">\n                    <div className=\"hero-body\">\n                        <div className=\"container\">\n                            <h1 className=\"title\">\n                                Login\n                            </h1>\n                            <div className=\"columns\">\n                                <div className=\"column is-half\">\n                                    <form action=\"\" onSubmit={this.handleSubmit} className=\"column is-3by4\" style={{ padding: 0 }}>\n                                        <div className=\"field\">\n                                            <div className=\"control has-icons-left\">\n                                                <input \n                                                    onChange={this.handleChange} \n                                                    value={this.state.email}\n                                                    className=\"input\" \n                                                    name=\"email\" \n                                                    type=\"text\" \n                                                    placeholder=\"Enter Email\" \n                                                />\n                                                <span className=\"icon is-small is-left\">\n                                                    <i className=\"fas fa-user\"></i>\n                                                </span>\n                                            </div>\n                                        </div>\n                                        <div className=\"field\">\n                                            <div className=\"control has-icons-left\">\n                                                <input onChange={this.handleChange} value={this.state.password} className=\"input\" name=\"password\" type=\"password\" placeholder=\"Enter password\" />\n                                                <span className=\"icon is-small is-left\">\n                                                    <i className=\"fas fa-lock\"></i>\n                                                </span>\n                                            </div>\n                                        </div>\n                                        <div className=\"field\">\n                                            <button type=\"submit\" className=\"button is-primary is-fullwidth\">Submit</button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                            <h2 className=\"subtitle\">\n                                <Link to='/'>Home</Link>\n                            </h2>\n                        </div>\n                    </div>\n                </section>\n            </div>\n        );\n    }\n\n}\n\n\n\nconst mapStateToProps = (state) => ({ auth: state });\nconst mapDispatchToProps = { login: userActions.login };\nconst connected = connect(mapStateToProps, mapDispatchToProps)(Login);\n\nexport {connected as Login}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\n\n\nconst Home = (props) => {\n    console.log('Home Component')\n    console.log(props);\n    let {loggedIn} = props.auth\n    console.log(loggedIn)\n    return (\n        <section className=\"hero is-fullheight\">\n            <div className=\"hero-body\">\n                <div className=\"container\">\n                    <h1 className=\"title is-size-1\">\n                        GREENVIEW\n                    </h1>\n                    { loggedIn && (\n                        <h2 className=\"subtitle\">\n                            <Link to='/dashboard'>Dashboard</Link>\n                        </h2>\n                    )}\n                    { !loggedIn && (\n                        <h2 className=\"subtitle\">\n                            <Link  to='/login'>Framers Login</Link>\n                        </h2>\n                    )}\n                    \n                </div>\n            </div>\n        </section>\n    )\n}\n\n\nconst mapStateToProps = (state) => ({ auth: state.authentication});\nconst mapDispatchToProps = {  };\nconst connected = connect(mapStateToProps, mapDispatchToProps)(Home);\n\nexport { connected as Home }","import React from \"react\";\nimport { geolocated } from \"react-geolocated\";\n\nclass Demo extends React.Component {\n    render() {\n        return !this.props.isGeolocationAvailable ? (\n            <div>Your browser does not support Geolocation</div>\n        ) : !this.props.isGeolocationEnabled ? (\n            <div>Geolocation is not enabled</div>\n        ) : this.props.coords ? (\n            <div>\n                <h1 className=\"subtitle\" style={{marginBottom: '.5rem'}}>You are Here</h1>\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>latitude</td>\n                            <td>{this.props.coords.latitude}</td>\n                        </tr>\n                        <tr>\n                            <td>longitude</td>\n                            <td>{this.props.coords.longitude}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n        ) : (<div>Getting the location data&hellip; </div>);\n    }\n}\n\nexport default geolocated({\n    positionOptions: {\n        enableHighAccuracy: false,\n    },\n    userDecisionTimeout: 5000,\n})(Demo);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { geolocated } from \"react-geolocated\";\nimport {\n    GoogleMap,\n    withScriptjs,\n    withGoogleMap,\n    Marker\n} from 'react-google-maps';\n\n\nimport Demo from './Location'\nimport { userActions, plantImageActions } from '../actions';\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filename: \"\",\n            loadingBarProgress: 0,\n            geolocation: false,\n            coords: { latitude: 28.629401599999998, longitude: 77.160448 }\n        }\n\n        this.fileInput = React.createRef();\n    }\n\n    componentWillMount() {\n        this.props.me();\n        this.props.getAllPlantImages();\n    }\n\n    componentDidMount() {\n        if (this.props.message.val) console.log('clear')\n\n        const updateLocation = ({coords}) => this.setState({\n            geolocation:true, coords: coords\n        }) \n        console.log(navigator);\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(function(position){\n                updateLocation(position);\n           });\n        }\n    }\n\n    handleChange = e => {\n        const name = this.fileInput.current.files[0].name;\n        this.setState({filename: name})\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        let data = new FormData();\n        data.append('image', this.fileInput.current.files[0]);\n        data.append('lat', this.props.coords.latitude);\n        data.append('lng', this.props.coords.longitude);\n\n        alert(this.fileInput.current.files[0].name);\n\n        this.props.uploadPlantImage(data)\n        // this.props.getAllPlantImages();\n    }\n\n    render() {\n\n        if (!this.state.geolocation) return <GeolocationNotEnabled {...this.props} />\n        console.log(this.state);\n        const {coords} = this.state;\n\n        let { user, markers } = this.props;\n\n        return (\n            <div>\n\n                {this.props.message.val && (\n                    this.props.message.title\n                )}\n\n                <div className=\"columns\">\n                    <div className=\"column is-one-quarter p-1\">\n                        <h1 className=\"title is-size-1\">\n                            <Link className=\"has-text-primary\" to='/'>Farmer</Link>\n                        </h1>\n                        <h1 className=\"subtitle\" style={{ textTransform: 'capitalize' }}>{user.name}</h1>\n\n                        <div>\n                            <button onClick={() => this.props.logout()} className=\"button is-link\" >Logout</button>\n                        </div>\n\n                        <br />\n\n                        <Demo />\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"field\">\n                                <div className=\"file has-name is-boxed is-fullwidth\" style={{ marginTop: '4rem' }}>\n                                    <label className=\"file-label\">\n                                        <input ref={this.fileInput} onChange={this.handleChange} className=\"file-input\" type=\"file\" name=\"plantimg\" />\n                                        <span className=\"file-cta\">\n                                            <span className=\"file-icon\">\n                                                <i className=\"fas fa-upload\"></i>\n                                            </span>\n                                            <span className=\"file-label\">\n                                                {!this.state.filename && (\n                                                    <>\n                                                        Upload a Picture\n                                                    </>\n                                                )}\n                                                {this.state.filename && (\n                                                    <>\n                                                        {this.state.filename}\n                                                    </>\n                                                )}\n                                    </span>\n                                        </span>\n                                        <span className=\"file-name\">\n                                            {/* {this.fileInput.current.files[0] && (this.fileInput.current.files[0].name)} */}\n                                        </span>\n                                    </label>\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <button onClick={this.showLoader} className=\"button is-primary is-fullwidth\">Submit</button>\n                            </div>\n                        </form>\n\n                    </div>\n                    <div className=\"column\">\n                        <div className=\"\" style={{ width: '100%', height: '100vh' }}>\n                            <MapContainer\n                                googleMapURL='https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyCFmHR_8osaHWKMr7_8NAySPUQSWLutFeE'\n                                loadingElement={<div style={{ height: '100%' }} />}\n                                containerElement={<div style={{ height: '100%' }} />}\n                                mapElement={<div style={{ height: '100%' }} />}\n                                coords={coords}\n                                markers={markers}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst GeolocationNotEnabled = (props) => (\n    <section className=\"hero is-fullheight\">\n        <div className=\"hero-body\">\n            <div className=\"container\">\n                <img style={{ width: '8em', marginBottom: '1rem' }} src=\"https://image.flaticon.com/icons/svg/356/356761.svg\" alt=\"\" />\n                <h1 className=\"title is-size-2\">\n                    Geolocation is Not Enabled\n                </h1>\n                <h2 className=\"subtitle\">\n                    <Link to='/'>Go back to Home</Link>\n                </h2>\n                {props.auth.loggedIn && <div>\n                    <button onClick={() => props.logout()} className=\"button is-link\" >Logout</button>\n                </div>}\n            </div>\n        </div>\n    </section>\n)\n\n\nconst mapStateToProps = (state) => ({\n    auth: state.authentication,\n    user: state.user,\n    markers: state.plantImages.data,\n    message: state.plantImages.message\n});\n\nconst mapDispatchToProps = {\n    logout: userActions.logout,\n    me: userActions.getUser,\n    uploadPlantImage: plantImageActions.uploadPlantImage,\n    getAllPlantImages: plantImageActions.getAllPlantImages,\n};\n\nconst connected = connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\nconst withGeoLocation = geolocated({\n    positionOptions: {\n        enableHighAccuracy: true,\n    },\n    userDecisionTimeout: 5000,\n})(connected)\n\nconst MarkerList = ({ markers }) => {\n\n\n    if (markers) return markers.map(item => <Marker\n        label={item.disease_name}\n        key={item.id + Math.floor((Math.random() * 100000) + 1)}\n        position={{ lat: parseFloat(item.lat), lng: parseFloat(item.lng) }\n        } />)\n    else return <div />\n}\n\nconst MapContainer = withScriptjs(withGoogleMap((props) => <GoogleMap\n    defaultZoom={17}\n    defaultCenter={{ lat: props.coords.latitude, lng: props.coords.longitude }}\n    defaultOptions={\n        {\n            styles: [\n                { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },\n                { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },\n                { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },\n                {\n                    featureType: 'all',\n                    elementType: 'labels.text',\n                    stylers: [{ \"visibility\": \"off\" }]\n                },\n                {\n                    featureType: 'poi',\n                    elementType: 'labels.icon',\n                    stylers: [{ \"visibility\": \"off\" }]\n                },\n                {\n                    featureType: 'poi.park',\n                    elementType: 'geometry',\n                    stylers: [{ color: '#263c3f' }]\n                },\n                {\n                    featureType: 'road',\n                    elementType: 'geometry',\n                    stylers: [{ color: '#38414e' }]\n                },\n                {\n                    featureType: 'transit',\n                    stylers: [{ \"visibility\": \"off\" }]\n                },\n                {\n                    featureType: 'water',\n                    elementType: 'geometry',\n                    stylers: [{ color: '#17263c' }]\n                },\n                {\n                    featureType: 'water',\n                    elementType: 'labels.text.fill',\n                    stylers: [{ color: '#515c6d' }]\n                },\n                {\n                    featureType: 'water',\n                    elementType: 'labels.text.stroke',\n                    stylers: [{ color: '#17263c' }]\n                }\n            ]\n        }\n    }\n>\n    <MarkerList markers={props.markers} />\n    <Marker label=\"\"\n        icon={{\n            url: 'https://cdn.pixabay.com/photo/2014/04/03/10/03/google-309740_960_720.png',\n            scaledSize: { width: 32, height: 62 }\n        }} position={{ lat: props.coords.latitude, lng: props.coords.longitude }} />\n</GoogleMap>));\n\nexport { withGeoLocation as Dashboard }","import React from 'react';\nimport {\n  Router, Route, Switch, Redirect\n  // Redirect, Link, useRouteMatch, useParams \n} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { history } from './helpers'\nimport { Login, Home, Dashboard } from './components'\n\nimport './App.sass';\nimport LoadingBar from 'react-redux-loading-bar'\n\nclass App extends React.Component {\n\n  render() {\n    // console.log(this.props)\n    return (\n      <div>\n        <LoadingBar style={{ backgroundColor: '#f11946', height: '5px' }} />\n        <Router history={history}>\n          <Switch>\n            <Route exact path=\"/\"><Home {...this.props} /></Route>\n            <Route path=\"/login\" component={Login} />\n            <PrivateRoute path=\"/dashboard\" component={Dashboard} />\n            \n          </Switch>\n        </Router>\n        \n      </div>\n    )\n  }\n}\n\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route {...rest} render={props => (\n    localStorage.getItem('token')\n      ? <Component {...props} />\n      : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n  )} />\n)\n\n\nconst mapStateToProps = (state) => ({ auth: state.authentication });\n// const mapDispatchToProps = { login: userActions.login };\nconst connected = connect(mapStateToProps, {})(App);\n\nexport { connected as App }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport {App} from './App';\nimport {store} from './helpers';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}